#include "Parameter.hpp"

// Parameter class
Parameter::Parameter(const ParameterInner& parameterInner) {
    this->parameterInner = parameterInner.clone();
}

Parameter::Parameter(const Parameter& original) {
    parameterInner = original.parameterInner->clone();
}

Parameter& Parameter::operator=(const Parameter& original) {
    if (this != &original) {
        delete parameterInner;
        parameterInner = original.parameterInner->clone();
    }
    return *this;
}

Parameter::~Parameter() {
    delete parameterInner;
}

double Parameter::mean(double timeStart, double timeEnd) const {
    double total = integral(timeStart, timeEnd);
    return total / (timeEnd - timeStart);
}

double Parameter::rootMeanSquare(double timeStart, double timeEnd) const {
    double total = integralSquare(timeStart, timeEnd);
    return total / (timeEnd - timeStart);
}

// ParameterConstant class

ParameterConstant::ParameterConstant(double constant) {
    this->constant = constant;
    constantSquare = constant * constant;
}

ParameterInner* ParameterConstant::clone() const {
    return new ParameterConstant(*this); // use copy constructor generated by compiler
}

double ParameterConstant::integral(double timeStart, double timeEnd) const {
    return constant * (timeEnd - timeStart);
}

double ParameterConstant::integralSquare(double timeStart, double timeEnd) const {
    return constantSquare * (timeEnd - timeStart);
}
